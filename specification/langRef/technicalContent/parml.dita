<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE reference PUBLIC "-//OASIS//DTD DITA Reference//EN"
 "reference.dtd">
<reference id="parml" xml:lang="en-us">
  <title><xmlelement>parml</xmlelement></title>
  <shortdesc>The <xmlelement>parml</xmlelement> element identifies a specialized definition list
    that is designed for documenting API
    parameters.<!--contains a list of terms and definitions that describes the parameters in an application programming interface.--></shortdesc>
  <prolog>
    <metadata>
      <keywords>
        <indexterm>parameter lists<indexterm>overview</indexterm></indexterm>
        <indexterm>programming<indexterm>parameter
          lists<indexterm>overview</indexterm></indexterm></indexterm>
        <indexterm>programming
          domain<indexterm><xmlelement>parml</xmlelement></indexterm></indexterm>
      </keywords>
    </metadata>
  </prolog>
  <refbody>
    <section id="specialization-hierarchy">
      <title>Specialization hierarchy</title>
      <p>The <xmlelement>parml</xmlelement> is specialized from <xmlelement>dl</xmlelement>. It is
        defined in the programming domain module.</p>
    </section>
    <section id="attributes">
      <title>Attributes</title>
      <p conkeyref="reuse-attributes/universal-compact"/>
    </section>
    <example id="example" otherprops="examples">
      <title>Example</title>
      <p>In the following code sample, a set of sample code is followed by a parameter list to
        define those parameters.</p>
      <codeblock xml:space="preserve" id="codeblock_rcl_rl4_rpb">&lt;p>This code example is a basic method signature:
&lt;codeblock&gt;returnType methodName(pList1, pList2) {&lt;/codeblock&gt;&lt;/p>
&lt;p>The method requires two parameters:
&lt;parml&gt;
 &lt;plentry&gt;
  &lt;pt&gt;pList1&lt;/pt&gt;
  &lt;pd&gt;is the first variable declaration passed to methodName&lt;/pd&gt;
 &lt;/plentry&gt;
 &lt;plentry&gt;
  &lt;pt&gt;pList2&lt;/pt&gt;
  &lt;pd&gt;is the second variable declaration passed to methodName&lt;/pd&gt;
 &lt;/plentry&gt;
&lt;/parml&gt;&lt;/p></codeblock>
      <p>The rendered version of that sample might look like:</p>
      <p>This code example is a basic method
        signature:<codeblock xml:space="preserve" id="codeblock_vks_xl4_rpb">returnType methodName(pList1, pList2) {</codeblock></p>
      <p>The method requires two parameters:<parml>
          <plentry>
            <pt>pList1</pt>
            <pd>is the first variable declaration passed to methodName</pd>
          </plentry>
          <plentry>
            <pt>pList2</pt>
            <pd>is the second variable declaration passed to methodName</pd>
          </plentry>
        </parml></p>
      <draft-comment author="robander" time="21 May 2021">I am nervous about example output that
        simply uses the element; anyone republishing the spec with a broken tool can see broken
        output, and assume it is valid because the spec source says "it might look like this". I'm
        not sure the sample output is needed at all here, or it could be described in
        prose.</draft-comment>
    </example>
  </refbody>
</reference>
